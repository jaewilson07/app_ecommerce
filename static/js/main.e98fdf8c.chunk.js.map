{"version":3,"sources":["components/menu-item/menu-item.component.jsx","components/directory-menu/constants.js","components/directory-menu/directory-menu.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","section","history","match","title","imageUrl","subtitle","size","linkUrl","console","log","url","className","onClick","push","style","backgroundImage","toUpperCase","sections","id","DirectoryMenu","state","this","map","key","Component","Homepage","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4WA4BeA,G,YAAAA,aAvBE,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAC5BC,EAA6CH,EAA7CG,MAAOC,EAAsCJ,EAAtCI,SAAUC,EAA4BL,EAA5BK,SAAUC,EAAkBN,EAAlBM,KAAMC,EAAYP,EAAZO,QAKzC,OAHAC,QAAQC,IAAIR,GACZO,QAAQC,IAAR,UAAeP,EAAMQ,KAArB,OAA2BH,IAGzB,yBACEI,UAAS,UAAKL,EAAL,cACTM,QAAS,kBAAMX,EAAQY,KAAR,UAAgBX,EAAMQ,KAAtB,OAA4BH,MAE3C,yBACEI,UAAU,mBACVG,MAAO,CAAEC,gBAAgB,OAAD,OAASX,MAEnC,yBAAKO,UAAU,WACb,wBAAIA,UAAU,SAASR,EAAMa,eAC7B,0BAAML,UAAU,YAAYN,SCtBvBY,EAAW,CACtB,CACEd,MAAO,OACPC,SAAU,oCACVc,GAAI,EACJb,SAAU,WACVE,QAAS,QAEX,CACEJ,MAAO,UACPC,SAAU,uCACVc,GAAI,EACJb,SAAU,WACVE,QAAS,WAEX,CACEJ,MAAO,WACPC,SAAU,wCACVc,GAAI,EACJb,SAAU,WACVE,QAAS,YAEX,CACEJ,MAAO,SACPC,SAAU,sCACVE,KAAM,QACNY,GAAI,EACJb,SAAU,WACVE,QAAS,UAEX,CACEJ,MAAO,OACPC,SAAU,mCACVE,KAAM,QACNY,GAAI,EACJb,SAAU,WACVE,QAAS,SCVEY,E,kDAlBb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEH,YAFH,E,qDAKJ,IACAA,EAAaI,KAAKD,MAAlBH,SAER,OACE,yBAAKN,UAAU,kBACZM,EAASK,KAAI,SAACtB,GAAD,OACZ,kBAAC,EAAD,CAAUA,QAASA,EAASuB,IAAKvB,EAAQkB,a,GAZvBM,aCMbC,EARE,WACf,OACE,yBAAKd,UAAU,YACb,kBAAC,EAAD,QCuBSe,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,IAAIC,UAAWJ,OCbrBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/B,MACvB,2DCXNgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.e98fdf8c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './menu-item.style.scss';\r\n\r\nconst MenuItem = ({ section, history, match }) => {\r\n  const { title, imageUrl, subtitle, size, linkUrl } = section;\r\n\r\n  console.log(history);\r\n  console.log(`${match.url}${linkUrl}`);\r\n\r\n  return (\r\n    <div\r\n      className={`${size} menu-item`}\r\n      onClick={() => history.push(`${match.url}${linkUrl}`)}\r\n    >\r\n      <div\r\n        className=\"background-image\"\r\n        style={{ backgroundImage: `url(${imageUrl}` }}\r\n      ></div>\r\n      <div className=\"content\">\r\n        <h1 className=\"title\">{title.toUpperCase()}</h1>\r\n        <span className=\"subtitle\">{subtitle}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(MenuItem);\r\n","export const sections = [\r\n  {\r\n    title: 'hats',\r\n    imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\r\n    id: 1,\r\n    subtitle: 'Shop Now',\r\n    linkUrl: 'hats',\r\n  },\r\n  {\r\n    title: 'jackets',\r\n    imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\r\n    id: 2,\r\n    subtitle: 'Shop Now',\r\n    linkUrl: 'jackets',\r\n  },\r\n  {\r\n    title: 'sneakers',\r\n    imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\r\n    id: 3,\r\n    subtitle: 'Shop Now',\r\n    linkUrl: 'sneakers',\r\n  },\r\n  {\r\n    title: 'womens',\r\n    imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\r\n    size: 'large',\r\n    id: 4,\r\n    subtitle: 'Shop Now',\r\n    linkUrl: 'womens',\r\n  },\r\n  {\r\n    title: 'mens',\r\n    imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\r\n    size: 'large',\r\n    id: 5,\r\n    subtitle: 'Shop Now',\r\n    linkUrl: 'mens',\r\n  },\r\n];\r\n","import React, { Component } from 'react';\r\n\r\nimport './directory-menu.style.scss';\r\nimport MenuItem from '../menu-item/menu-item.component';\r\n\r\nimport { sections } from './constants';\r\n\r\nclass DirectoryMenu extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { sections };\r\n  }\r\n\r\n  render() {\r\n    const { sections } = this.state;\r\n\r\n    return (\r\n      <div className=\"directory-menu\">\r\n        {sections.map((section) => (\r\n          <MenuItem section={section} key={section.id} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DirectoryMenu;\r\n","import React from 'react';\r\n\r\nimport './homepage.style.scss';\r\nimport DirectoryMenu from '../../components/directory-menu/directory-menu.component';\r\n\r\nconst Homepage = () => {\r\n  return (\r\n    <div className=\"homepage\">\r\n      <DirectoryMenu />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Homepage from './pages/homepage/homepage.component';\n\nconst HatsPage = () => (\n  <div>\n    <h1>Hats Page</h1>\n  </div>\n);\n\nconst HatsDetail = (props) => {\n  console.log(props);\n  return (\n    <div>\n      <h1>{`TopicDetails: ${props.match.params.ItemId}`}</h1>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}